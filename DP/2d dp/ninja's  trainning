 //  recursion 
   int solve(vector<vector<int>>& arr , int day , int last )
  {
      // base case 
      if(day==0)
      {
          int maxi = 0 ;
          for(int i = 0 ;i<3 ; i++)
          {
              if(i!= last )
              {
                  maxi = max(arr[0][i] , maxi);
              }
          }
          return maxi ;
      }
      
     
      
      // condiions 
      int maxi = 0 ; 
      for(int i = 0 ; i <3 ; i++)
      { int point = 0 ;
          if(i!= last )
          {
             point += arr[day][i] + solve(arr , day-1 , i , dp);
          }
          maxi = max(point , maxi);
      }
return [day][last] =  maxi ;


***************// memoization *****************************************************************************************************************************************************************

  int solve(vector<vector<int>>& arr , int day , int last , vector<vector<int>>& dp)
  {
      // base case 
      if(day==0)
      {
          int maxi = 0 ;
          for(int i = 0 ;i<3 ; i++)
          {
              if(i!= last )
              {
                  maxi = max(arr[0][i] , maxi);
              }
          }
          return maxi ;
      }
      
      if(dp[day] [ last] != -1)return dp[day][last];
      
      // condiions 
      int maxi = 0 ; 
      for(int i = 0 ; i <3 ; i++)
      { int point = 0 ;
          if(i!= last )
          {
             point += arr[day][i] + solve(arr , day-1 , i , dp);
          }
          maxi = max(point , maxi);
      }
      return dp[day][last] =  maxi ;
