in this the array is in circle so last and ifrst values are  adjacent 

// we will use space optimized method of first solution 
// and create two arrays one with last , one first first element 

, pass both and have maximum solution 

class Solution {
public:
int solve(vector<int>&nums)
{
int n = nums.size();
       int  prev2 =  0  ;
        int prev = nums[0]; 

        for(int i = 1 ; i<n ; i++)
        { int curr = nums[i] ;
            int pick =  curr + prev2 ;
            int notpick = 0 + prev ;

            curr = max(pick , notpick);

            prev2 = prev ; 
            prev = curr ; 


        }
        return prev;
}

    int rob(vector<int>& nums) {
        vector<int>temp1,temp2;

    int n = nums.size();

    if(n<2) return nums[0];
        for(int i=0 ; i<n ; i++)
        {
            if(i != 0 ) temp1.push_back(nums[i]);
            if(i != n-1) temp2.push_back(nums[i]);


        }
        return max(solve(temp1) , solve(temp2));


    }
};
